# Maintainer: Antoine Martin (ayakael) <dev@ayakael.net>

# Based on Archlinux PKGBUILD by:
# Maxime Gauduin <alucryd@archlinux.org>
# Kristian Mosegaard <kristian@mosen.me>
# Max Liebkies <mail@maxliebkies.de>
# Krzysztof Bogacki <krzysztof.bogacki@leancode.pl>

pkgname=dotnet
pkgdesc='The .NET Core SDK'
pkgver=5.0.7
pkgrel=0
arch='x86_64'
url=https://www.microsoft.com/net/core
license='MIT'
makedepends='
  bash
  clang
  cmake
  git
  icu-dev
  inetutils-syslogd
  krb5-dev
  dotnet-sdk
  dotnet-runtime
  libgit2-dev
  libunwind-dev
  libxml2-dev
  libxml2-utils
  lldb-dev
  llvm10-dev
  lttng-ust-dev
  nodejs
  openssl-dev
  zlib-dev
'
#depends='
#  icu-libs
#  krb5-libs
#  libgcc
#  #libgdiplus
#  libintl
#  libssl1.1
#  libstdc++zlib
#'
subpackages="$pkgname-sdk:sdk $pkgname-host:host $pkgname-runtime:runtime aspnet-runtime:aspnet_runtime:noarch netstandard-targeting-pack:netstandard_targeting_pack:noarch $pkgname-targeting-pack:targeting_pack aspnet-targeting-pack:aspnet_targeting_pack:noarch" 
_gittag=v${pkgver}-runtime
_giturl=https://github.com/dotnet/source-build
source="
  $pkgname-$pkgver.git.zip
  https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.sh
  dotnet.sh
  runtime_link-order.patch
  runtime_alpine-non-portable-rid-fix.patch
  sdk_telemetry-optout.patch
  applications-insights_fix-net40-location.patch
  build_applicationinsights-alternative-source.patch
"

builddir="$srcdir/$pkgname"

snapshot() {
        mkdir -p "$srcdir"
        cd "${srcdir}"
        if ! [ -d $pkgname.git ]; then
                git clone $_giturl $pkgname.git || return 1
                cd $pkgname.git
        else
                cd $pkgname.git
                git fetch || return 1
        fi

        echo "Repo archive"
        mkfifo $pkgname-$pkgver.git
        git bundle create - $_gittag > $pkgname-$pkgver.git &
        zip --fifo "${SRCDEST}"/$pkgname-$pkgver.git.zip $pkgname-$pkgver.git
        rm $pkgname-$pkgver.git

        ln -s "$SRCDEST"/$pkgname-$pkgver.git.zip "$startdir"/$pkgname-$pkgver.git.zip
}

unpack() {
  default_unpack
  cd "${srcdir}"
  git clone $pkgname-$pkgver.git $pkgname --branch $_gittag 1>/dev/null 2>&1
}


prepare() {
  local i failed=                                        
  [ -n "$builddir" -a -d "$builddir" ] && cd "$builddir"

  msg "Settings up bootstrap SDK"
  eng/common/dotnet-install.sh -runtime dotnet -version 3.1.1
  bash .dotnet/dotnet-install.sh -c Current --install-dir ./
  bash .dotnet/dotnet-install.sh -c 3.1 --install-dir . --runtime dotnet

  # disable warnings
  sed -i 's|skiptests|skiptests ignorewarnings|' repos/runtime.common.props
  export SOURCE_BUILD_SKIP_SUBMODULE_CHECK=1

  if ! have_patches; then
    return 0
  fi
  [ -d "$builddir" ] || { error "Is \$builddir set correctly?"; return 1; }

  msg "Deploying patches"
  for i in $source; do
    case ${i%::*} in
      build_*.patch) 
        patch ${patch_args:--p1} -i "$srcdir/$(filename_from_uri $i)" || failed="$failed $i"
      ;;           
      *.patch)              
        local _package=$(echo ${i} | sed 's|_.*||')
        local _patch=$(echo ${i} | sed "s|${_package}_||")
        echo "cp $_patch -> $_package"
        [ -d patches/$_package ] || mkdir patches/$_package	
        cp "$srcdir"/"$i" patches/${_package}/${_patch}
      ;;
    esac                                          
  done                                               
  if [ -z "$failed" ]; then                             
    return 0                                                
  fi                                                        
  error "The following patches failed to apply:"
  for i in $failed; do                                                                                                                                                       
    printf "  %s\n" "$i"
  done
  return 1
}

pkgver() {
  cd "$builddir"

  local _runtimever=$(xmllint --xpath "//Dependency[@Name='Microsoft.NETCore.App.Runtime.win-x64']/@Version" eng/Version.Details.xml | cut -d '=' -f 2 | sed 's/^"//; s/"$//')
  local _sdkver=$(xmllint --xpath "//Dependency[@Name='Microsoft.NET.Sdk']/@Version" eng/Version.Details.xml | cut -d '=' -f 2 | sed 's/^"//; s/"$//; s/-rtm.*//; s/-servicing.*//')

  echo "${_runtimever}.sdk${_sdkver##*.}"
}

build() {
  cd "${builddir}"
  msg "Building $pkgname-$pkgver"
  ./build.sh \
    --with-sdk ../dotnet \
    /p:ArchiveDownloadedPackages=true \
    /p:ContinueOnPrebuiltBaselineError=true \
    /p:SkipPortableRuntimeBuild=true \
    /p:SkipPrebuiltEnforcement=true \
    /p:UseSystemLibraries=true \
    /p:UseSystemLibunwind=true
}

package() {
  depends='
	$pkgname-sdk
	$pkgname-host
	$pkgname-runtime
	$pkgname-targetting-pack
	aspnet-runtime
	aspnet-targeting-pack
	netstandard-targeting-pack
  '
  mkdir -p "${pkgdir}"
}

sdk() {
  depends='
    dotnet-runtime
    dotnet-targeting-pack
    musl
    libgcc
    netstandard-targeting-pack
    aspnet-targeting-pack
  '

  cd "$builddir"/artifacts/x64/Release

  install -dm 755 "$subpkgdir"/usr/share/dotnet "$subpkgdir"/usr/share/licenses
  bsdtar -xf dotnet-sdk-*.tar.gz -C "${subpkgdir}"/usr/share/dotnet/ --no-same-owner sdk templates
  ln -s dotnet-host "${subpkgdir}"/usr/share/licenses/dotnet-sdk
}


host() {
  pkgdesc='A generic driver for the .NET Core Command Line Interface'
  depends='
    gcc
    musl
  '

  cd $builddir/artifacts/x64/Release

  install -dm 755 "$subpkgdir"/etc/profile.d "$subpkgdir"/usr/bin "$subpkgdir"/usr/lib "$subpkgdir"/usr/share/dotnet "$subpkgdir"/usr/share/licenses/dotnet-host 

  bsdtar -xf dotnet-sdk-*.tar.gz -C "${subpkgdir}"/usr/share/dotnet/ --no-same-owner dotnet host
  bsdtar -xf dotnet-sdk-*.tar.gz -C "${subpkgdir}"/usr/share/licenses/dotnet-host/ --no-same-owner LICENSE.txt ThirdPartyNotices.txt
  ln -s /usr/share/dotnet/dotnet "${subpkgdir}"/usr/bin/dotnet
  ln -s /usr/share/dotnet/host/fxr/${pkgver}/libhostfxr.so "${subpkgdir}"/usr/lib/libhostfxr.so
  install -Dm 644 "${srcdir}"/dotnet.sh -t "${subpkgdir}"/etc/profile.d/
}

runtime() {
  pkgdesc='The .NET Core runtime'
  makedepends='
    icu-dev
    krb5-dev
    libunwind-dev
    zlib-dev
    openssl-dev
    '
  depends='
    dotnet-host
    libgcc
    musl
    icu
    krb5-libs
    libunwind
    zlib
    openssl
  '

  cd "$builddir"/artifacts/x64/Release

  install -dm 755 "$subpkgdir"/usr/share/dotnet "$subpkgdir"/usr/share/licenses
  bsdtar -xf dotnet-sdk-*.tar.gz -C "${subpkgdir}"/usr/share/dotnet/ --no-same-owner shared/Microsoft.NETCore.App
  ln -s dotnet-host "${subpkgdir}"/usr/share/licenses/dotnet-runtime
}

aspnet_runtime() {
  pkgdesc='The ASP.NET Core runtime'
  depends='dotnet-runtime'

  cd "$builddir"/artifacts/x64/Release

  install -dm 755 "$subpkgdir"/usr/share/dotnet "$subpkgdir"/usr/share/licenses
  bsdtar -xf dotnet-sdk-*.tar.gz -C "${subpkgdir}"/usr/share/dotnet/ --no-same-owner shared/Microsoft.AspNetCore.App
  ln -s dotnet-host "${subpkgdir}"/usr/share/licenses/aspnet-runtime
}

netstandard_targeting_pack() {
  pkgdesc='The .NET Standard targeting pack'

  cd "$builddir"/artifacts/x64/Release

  install -dm 755 "$subpkgdir"/usr/share/dotnet "$subpkgdir"/usr/share/licenses
  bsdtar -xf dotnet-sdk-*.tar.gz -C "${subpkgdir}"/usr/share/dotnet/ --no-same-owner packs/NETStandard.Library.Ref
  ln -s dotnet-host "${subpkgdir}"/usr/share/licenses/netstandard-targeting-pack
}

targeting_pack() {
  pkgdesc='The .NET Core targeting pack'
  depends='netstandard-targeting-pack'

  cd "$builddir"/artifacts/x64/Release

  install -dm 755 "$subpkgdir"/usr/share/dotnet "$subpkgdir"/usr/share/licenses
  bsdtar -xf dotnet-sdk-*.tar.gz -C "${subpkgdir}"/usr/share/dotnet/ --no-same-owner packs/Microsoft.NETCore.App.Host.alpine.3.13-x64 packs/Microsoft.NETCore.App.Ref
  ln -s dotnet-host "${subpkgdir}"/usr/share/licenses/dotnet-targeting-pack
}

aspnet_targeting_pack() {
  pkgdesc='The ASP.NET Core targeting pack'
  depends='dotnet-targeting-pack'

  cd "$builddir"/artifacts/x64/Release

  install -dm 755 "$subpkgdir"/usr/share/dotnet "$subpkgdir"/usr/share/licenses
  bsdtar -xf dotnet-sdk-*.tar.gz -C "${subpkgdir}"/usr/share/dotnet/ --no-same-owner packs/Microsoft.AspNetCore.App.Ref
  ln -s dotnet-host "${subpkgdir}"/usr/share/licenses/aspnet-targeting-pack
}

# vim: ts=2 sw=2 et:
sha512sums="a9603309bb2dcdab89177f19e488c6ae268ae6d1d79ac8db5fd84508f4917e24aa388a658afaec53e2a4aee2520d6d4c1fff8e1f61aa8ef7f3465305d9a760ae  dotnet-5.0.7.git.zip
ecab4809e617e9cd30940b1c1a700e16b37b5974c850a60da7f1a25bf81516850e4533ef39d2d8786381e0e4e325d3b53fbb2377ecaa6c0813bb00fc1c92b784  dotnet-install.sh
f58bd83b709dcb4b0b67830756069c34258a167b33cb290cbf30f21d69d75402d38e013fd7bbf00640fe19e397f78df6ff787cf8484ee8967d5b8809f033eafb  dotnet.sh
ad57d02371d351106e043fa104e31afbb0d6799e7ce0ea1a26f585abbfbab7bcba734c7e70491c4af5bfbed965a9ed3235cf4bc1019f504baf482518193b10a7  runtime_link-order.patch
944461da9ed50d536195ab3572b15fdfa74713344a4ca5e31bed627f09fbf328dd0d1f66599553d474e766cacdba7146c701180810383245fcdce1aba39bfef3  runtime_alpine-non-portable-rid-fix.patch
c96700138ea919c169c3a394f1bf9548c7f86b1ba42b193d6e7bb0a1e2bd6f7f202befbc61246a8720181cd40e1f7fa36a6c208eb19b03a23e21994136fb2507  sdk_telemetry-optout.patch
0469d571d0f7634d3794761f04e1cbff9d27d642d134a11a13560574280e5cab6f366eb8820e61a449eca99470fdea8d9f6a7d97b633059b2fe25257ed1579e6  applications-insights_fix-net40-location.patch
58a3e93e5fb6247569c291f86db127cbbc6cc6842eaf0973c2a211d4806f08dcabd9781b7da567088d820a337d58d6375230ade991dcc77e170266675c4a97e5  build_applicationinsights-alternative-source.patch"
